#include<bits/stdc++.h>
using namespace std;

int nodes;
int adj_mat[20][20];
int visited_s[20];
int visited_p[20];

void s_dfs(int i){
	cout<<" "<<i;
	visited_s[i]=1;
	for(int j=0;j<nodes;j++){
		if(adj_mat[i][j]==1 && !visited_s[j])
		{
			s_dfs(j);
		}
	}
}


void p_dfs(int i){
	
	visited_p[i]=1;
	#pragma omp parallel for
	for(int j=0;j<nodes;j++){
		if(adj_mat[i][j]==1 && !visited_p[j])
		{
			p_dfs(j);
		}
	}
}


int main()
{
	cout<<"\nEnter nodes :";
	cin>>nodes;
	
	for(int i=0;i<nodes;i++)
	{
		for(int j=i;j<nodes;j++)
		{
			char edge;
			cout<<"\nIs there any edge between "<<i<<" & "<<j<<" (y/n)";
			cin>>edge;
			
			if(edge=='y')
			{
				adj_mat[i][j]==1;
				adj_mat[j][i]==1;
			}
			else if(edge=='n')
			{
				adj_mat[i][j]==0;
				adj_mat[j][i]==0;
			}
	    }	
	}	
	
	auto start=chrono::high_resolution_clock::now();
	s_dfs(0);
	auto stop=chrono::high_resolution_clock::now();
	auto result=stop-start;
	auto duration=chrono::duration_cast<chrono::nanoseconds>(result);
	cout<<"\nSequential dfs :"<<to_string(duration.count())<<"ns";
	
	auto start2=chrono::high_resolution_clock::now();
	#pragma omp parallel num_threads(4)
	{
		#pragma omp single
		{
			p_dfs(0);
		}
	}
	auto stop2=chrono::high_resolution_clock::now();
	auto result2=stop2-start2;
	auto duration2=chrono::duration_cast<chrono::nanoseconds>(result2);
	cout<<"\nparallel dfs :"<<to_string(duration2.count())<<"ns";
	
	
	return 0;
}